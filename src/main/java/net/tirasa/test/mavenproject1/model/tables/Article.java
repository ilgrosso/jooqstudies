/*
 * This file is generated by jOOQ.
 */
package net.tirasa.test.mavenproject1.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.tirasa.test.mavenproject1.model.Keys;
import net.tirasa.test.mavenproject1.model.Public;
import net.tirasa.test.mavenproject1.model.tables.Author.AuthorPath;
import net.tirasa.test.mavenproject1.model.tables.records.ArticleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>public.article.id</code>.
     */
    public final TableField<ArticleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.article.title</code>.
     */
    public final TableField<ArticleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.article.description</code>.
     */
    public final TableField<ArticleRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.article.author_id</code>.
     */
    public final TableField<ArticleRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.INTEGER, this, "");

    private Article(Name alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.article</code> table reference
     */
    public Article(String alias) {
        this(DSL.name(alias), ARTICLE);
    }

    /**
     * Create an aliased <code>public.article</code> table reference
     */
    public Article(Name alias) {
        this(alias, ARTICLE);
    }

    /**
     * Create a <code>public.article</code> table reference
     */
    public Article() {
        this(DSL.name("article"), null);
    }

    public <O extends Record> Article(Table<O> path, ForeignKey<O, ArticleRecord> childPath, InverseForeignKey<O, ArticleRecord> parentPath) {
        super(path, childPath, parentPath, ARTICLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ArticlePath extends Article implements Path<ArticleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ArticlePath(Table<O> path, ForeignKey<O, ArticleRecord> childPath, InverseForeignKey<O, ArticleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ArticlePath(Name alias, Table<ArticleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ArticlePath as(String alias) {
            return new ArticlePath(DSL.name(alias), this);
        }

        @Override
        public ArticlePath as(Name alias) {
            return new ArticlePath(alias, this);
        }

        @Override
        public ArticlePath as(Table<?> alias) {
            return new ArticlePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.ARTICLE_PKEY;
    }

    @Override
    public List<ForeignKey<ArticleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTICLE__FK_AUTHOR_ID);
    }

    private transient AuthorPath _author;

    /**
     * Get the implicit join path to the <code>public.author</code> table.
     */
    public AuthorPath author() {
        if (_author == null)
            _author = new AuthorPath(this, Keys.ARTICLE__FK_AUTHOR_ID, null);

        return _author;
    }

    @Override
    public Article as(String alias) {
        return new Article(DSL.name(alias), this);
    }

    @Override
    public Article as(Name alias) {
        return new Article(alias, this);
    }

    @Override
    public Article as(Table<?> alias) {
        return new Article(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Name name) {
        return new Article(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Table<?> name) {
        return new Article(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Article where(Condition condition) {
        return new Article(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Article where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Article where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Article where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Article where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Article where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Article where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Article where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Article whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Article whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
